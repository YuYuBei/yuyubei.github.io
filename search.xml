<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PHP实用核心技术视频教程-PHP编码规范]]></title>
    <url>%2F2019%2F04%2F19%2FPHP%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[命名规范不好的命名12345function fun1($var) &#123; $a = strrpos($var, '.'); $b = substr($var, $a+1); return $b;&#125; 好的命名1234function getUserInfoByUid($uid) &#123; //一眼望去就知道这个是通过uid获取用户信息 //...&#125; 命名规范的注意事项： 命名要有实际含义 命名风格保持一致 不用拼音命名 不用语言关键字命名 适当使用注释： 好的代码应该是自描述的（一看到函数名就知道函数作用） 难以理解的地方加上注释 函数的功能加上注释说明 类的功能和使用方法加注释 坚持字符编码统一： PHP编码 == 模板编码 == 数据库编码 （一般都是utf-8） 命名规范的注意事项： 命名要有实际含义 命名风格保持一致 不用拼音命名 不用语言关键字命名 变量使用之前需要初始化： 12345function getInfo($uid) &#123; $list = []; //提前声明 ... $list[] = $info; //提前看见过声明知道这里是给空数组增加一个新的元素&#125; 使用未定义的变量比使用一个定义好的变量速度上要慢8倍 使用未定义的变量会抛出NOTICE错误 在开头的时候初始化可以增加代码的可读性 用 ‘NULL ===’ 替代 is_null： 可以避免调用函数，减少内存资源的占用 用 ‘===’ 替代 ’==‘ ： 同时比较值和类型 避免在for循环的条件中进行计算： 1234$length = strlen($str) //把条件比较提取出来从而减少运算次数for($i = 0; $i &lt; $length; $i++) &#123; ...&#125; strtr 替代 str_replace： 123$subject = 'hello, world';echo strtr($subject, array('hello' =&gt; 'world', 'world' =&gt; 'hello'));echo str_replace(['hello'=&gt;'world'], ['world'=&gt;'hello', $subject]); 前者的效率是后者的四倍 优先使用单引号： 单引号中的反斜杠无法进行字符转义（字符中的反斜杠除外） 双引号可以解析转义字符和变量，但是运行效率相对于单引号而言会更低 1234$test = 'abc';//以后两种都可以被解析echo "$test's test"; // ’ 在变量名中是无效的echo "&#123;$test&#125;s test"; 在项目的入口文件加入header头： 1header('Content-type: text/html; charset=utf-8'); 测试环境中开启所有错误，上线后关闭所有错误，避免使用@屏蔽错误： 12345error_reporting(7) //开启所有错误//0: all close//1: E_RROR//2: E_WARNING//3: E_PARSE 12345ini_set('display_errors', false);if (in_array($_SERVER ['ENV'], array('test', 'dev', 'local'))) &#123; error_reporting(E_ALL); ini_set('display_errors', true);&#125; 使用 @ 屏蔽错误后，对于解决程序运行过程中所发生的问题会产生负面影响，干扰问题判断 上线后应关闭所有错误的同时，把错误代码写入到错误日志中，方便查错 123456try &#123; //...&#125; catch (Exception $e) &#123; Tool_Log::warning(__METHOD__."code: ".$e-&gt;getCode()."msg: ".$e-&gt;getMessage()); return false;&#125; 用FALSE表示错误，用NULL表示不存在 操作类的函数，失败返回FALSE，表示操作失败 查询类的函数，没有找到想要的值返回NULL，表示“找不到” 优先使用PHP内置函数，减少正则的使用（正则效率较低） filter_var(&#39;zhangsan@163.com‘, FILTER_VALIDATE_EMAIL); 判断字符串是否包含邮箱字段，成功返回符合的部分，失败返回false FILTER_VALIDATE_EMAIL 邮箱 FILTER_VALIDATE_BOOLEAN Boolean值 FILTER_VALIDATE_DOMAIN 域名 FILTER_VALIDATA_FLOAT 浮点数 FILTER_VALIDATE_INT 整数 FILTER_VALIDATE_IP IP地址 FILTER_VALIDATE_MAC MAC地址 FILTER_VALIDATE_REGEXP 正则表达式 FILTER_VALIDATE_URL url地址 parse_url(string $url [, $component]) 解析url，返回其中的组成部分 http_build_query(mixed $query[, string, $numeric_prefix [, string $arg_separator [, …]]]) 生成URL-encode之后的请求字符串（常用于curl,避免请求参数编码错误） 1234$data = array('foo' =&gt; 'bar', 'baz' =&gt; 'boom', 'cow' =&gt; 'milk');echo http_build_query($data) . "\n"; //foo=bar&amp;baz=boom&amp;cow=milk exoif_imagetype(string $filename) 判断一个图像的类型 uniqiid([string $prefix=””[, bool $more_entropy = false]]) 生成一个唯一ID(可带前缀，基于当前时间微秒数，但是服务系统时间有时候可能发生变化，建议用more_entropy来增加唯一性的概率) get_browser([string $user_agent [, bool $return_array = false]]) 获取浏览器的相关信息(第二个参数控制返回值为对象还是数组) 防御式编程思想 默认所有的外部输入内容都带有攻击性 1$username = htmlspecialchars($_GET['username']); 使用pdo操作MySQL 123456789101112131415161718192021/* 写法一 */$sql = "select * from chapter where id=:id";// 预处理SQL语句$res = $db-&gt;prepare($sql);// 执行SQLif ($res-&gt;execute([":id" =&gt; 1])) &#123; // 获取一行结果集 $row = $res-&gt;fetch(); print_r($row);&#125;/* 写法二 */$sql = "select * from chapter where id=? and status=?";// 预处理SQL语句$res = $db-&gt;prepare($sql);// 执行SQLif ($res-&gt;execute([2, 1])) &#123; // 获取一行结果集 $row = $res-&gt;fetch(); print_r($row);&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F04%2F19%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
